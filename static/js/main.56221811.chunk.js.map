{"version":3,"sources":["App.js","serviceWorker.js","index.js","donut.png"],"names":["App","state","quote","btnText","numOfWords","clearQuote","_this","setState","Object","objectSpread","getQuote","filteredQuotes","key","quotes","hasOwnProperty","parseInt","push","apply","toConsumableArray","i","Math","floor","random","length","copyToClipboard","str","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","setTimeout","_this2","this","react_default","a","className","src","donut","alt","onClick","htmlFor","name","type","step","min","max","onChange","e","target","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"02ZAyFeA,oNAnFbC,MAAQ,CACNC,MAAO,GACPC,QAAS,oBACTC,WAAY,KAGdC,WAAa,WACXC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EAAKL,MADV,CAEEC,MAAO,GACPE,WAAY,QAIhBM,SAAW,WACT,IAAIC,EAAiB,GACrB,IAAK,IAAMC,KAAOC,EACZA,EAAOC,eAAeF,IAASA,GAAOG,SAAST,EAAKL,MAAMG,aAC5DO,EAAeK,KAAfC,MAAAN,EAAcH,OAAAU,EAAA,EAAAV,CAASK,EAAOD,KAIlC,IAAMO,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAeY,OAAS,IAC9DjB,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EAAKL,MADV,CAEEC,MAAOS,EAAeQ,SAI1BK,gBAAkB,SAACC,GACjB,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQvB,EAAKL,MAAMC,MACtByB,SAASG,KAAKC,YAAYL,GAC1BA,EAAGM,SACHL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,GAE1BpB,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EAAKL,MADV,CAEEE,QAAS,YACR,WACDgC,WAAW,WACT7B,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EAAKL,MADV,CAEEE,QAAS,wBAEV,gFAIE,IAAAiC,EAAAC,KACP,OACEC,EAAAC,EAAAX,cAAA,OAAKY,UAAU,OACbF,EAAAC,EAAAX,cAAA,cACEU,EAAAC,EAAAX,cAAA,cAAKU,EAAAC,EAAAX,cAAA,OAAKa,IAAKC,IAAOC,IAAI,QAAQH,UAAU,UAA5C,aACAF,EAAAC,EAAAX,cAAA,KAAGY,UAAU,QAAb,yDAEFF,EAAAC,EAAAX,cAAA,OAAKY,UAAU,YACbF,EAAAC,EAAAX,cAAA,UAAQY,UAAU,MAAMI,QAASP,KAAK3B,UAAtC,aACA4B,EAAAC,EAAAX,cAAA,UAAQY,UAAU,MAAMI,QAASP,KAAKhC,YAAtC,SACAiC,EAAAC,EAAAX,cAAA,SAAOiB,QAAQ,SAAf,gCACAP,EAAAC,EAAAX,cAAA,SACIkB,KAAK,QACLC,KAAK,SACLC,KAAK,IAAIC,IAAI,IAAIC,IAAI,KACrBrB,MAAOQ,KAAKpC,MAAMG,WAClB+C,SAAU,SAACC,GAAD,OAAOhB,EAAK7B,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACZ4B,EAAKnC,MADO,CAEfG,WAAYgD,EAAEC,OAAOxB,YAR3B,YAYFS,EAAAC,EAAAX,cAAA,OAAKY,UAAU,WACZH,KAAKpC,MAAMC,OAEdoC,EAAAC,EAAAX,cAAA,UAAQ0B,UAAWjB,KAAKpC,MAAMC,MAAOsC,UAAU,0BAA0BI,QAASP,KAAKb,iBACpFa,KAAKpC,MAAME,iBA7EJoD,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxB,EAAAC,EAAAX,cAACmC,EAAD,MAASpC,SAASqC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.56221811.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport quotes from './quotes.json';\nimport donut from './donut.png';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    quote: '',\n    btnText: 'Copy to clipboard',\n    numOfWords: 3\n  }\n\n  clearQuote = () => {\n    this.setState({\n      ...this.state,\n      quote: '',\n      numOfWords: 3\n    });\n  }\n\n  getQuote = () => {\n    let filteredQuotes = [];\n    for (const key in quotes) {\n      if (quotes.hasOwnProperty(key) && (key >= parseInt(this.state.numOfWords))) {\n        filteredQuotes.push(...quotes[key]);\n      }\n    }\n\n    const i = Math.floor(Math.random() * (filteredQuotes.length + 1));\n    this.setState({\n      ...this.state,\n      quote: filteredQuotes[i]\n    });\n  }\n\n  copyToClipboard = (str) => {\n    const el = document.createElement('textarea');\n    el.value = this.state.quote;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n    this.setState({\n      ...this.state,\n      btnText: 'Copied!'\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          ...this.state,\n          btnText: 'Copy to clipboard'\n        });\n      }, 700)\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>H<img src={donut} alt=\"donut\" className=\"donut\" />mer Ipsum</h1>\n          <p className=\"desc\">Lorem Ipsum generator using Homer Simpsons's quotes!</p>\n        </header>\n        <div className=\"controls\">\n          <button className=\"btn\" onClick={this.getQuote}>Get Quote</button>\n          <button className=\"btn\" onClick={this.clearQuote}>Clear</button>\n          <label htmlFor=\"words\">Show quotes with at least&nbsp;\n          <input\n              name=\"words\"\n              type=\"number\"\n              step=\"3\" min=\"3\" max=\"30\"\n              value={this.state.numOfWords}\n              onChange={(e) => this.setState({\n                ...this.state,\n                numOfWords: e.target.value\n              })}\n            /> words.</label>\n        </div>\n        <div className=\"balloon\">\n          {this.state.quote}\n        </div>\n        <button disabled={!this.state.quote} className=\"btn btn--wide btn--copy\" onClick={this.copyToClipboard}>\n          {this.state.btnText}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/normalize.css/normalize.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/donut.c3eb4227.png\";"],"sourceRoot":""}